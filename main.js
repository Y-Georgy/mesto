(()=>{"use strict";function e(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const t=function t(n,r){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e(this,"rendererItems",(function(e){e.forEach((function(e){o._renderer(e)}))})),e(this,"addItem",(function(e){o._containerForAddItem.append(e)})),e(this,"addItemToTop",(function(e){o._containerForAddItem.prepend(e)})),this._containerForAddItem=document.querySelector(r),this._renderer=n};function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const o=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r(this,"_handleEscClose",(function(e){"Escape"===e.key&&n.close()})),r(this,"_handlerClickClose",(function(e){(e.target.classList.contains("popup_opened")||e.target.classList.contains("popup__icon-close"))&&n.close()})),this._popup=document.querySelector(t)}var t,o;return t=e,(o=[{key:"open",value:function(){document.addEventListener("keydown",this._handleEscClose),this._popup.classList.add("popup_opened")}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){this._popup.addEventListener("mousedown",this._handlerClickClose)}}])&&n(t.prototype,o),e}();function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?u(e):t}function u(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function l(e,t,n){return(l="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=s(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const f=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(o,e);var t,n,r=(t=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=s(t);if(n){var o=s(this).constructor;e=Reflect.construct(r,arguments,o)}else e=r.apply(this,arguments);return c(this,e)});function o(e){var t,n,i,a,c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),c=function(e){var r=e.link,i=e.title;n._popupImage.src=r,n._popupImage.alt="Увеличенное изображение ".concat(i),n._popupSignature.textContent=i,l((t=u(n),s(o.prototype)),"open",t).call(t)},(a="open")in(i=u(n=r.call(this,e)))?Object.defineProperty(i,a,{value:c,enumerable:!0,configurable:!0,writable:!0}):i.open=c,n._popup=document.querySelector(e),n._popupImage=n._popup.querySelector(".popup__image"),n._popupSignature=n._popup.querySelector(".popup__image-signature"),n}return o}(o);function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t,n){return(d="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=b(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function _(e,t){return(_=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?m(e):t}function m(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=b(r);if(o){var n=b(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return y(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),v(m(n=i.call(this,t)),"_getInputValues",(function(){var e={};return n._popupInputs.forEach((function(t){e[t.name]=t.value})),e})),v(m(n),"setInputValues",(function(e){n._popupInputs.forEach((function(t){t.value=e[t.name]}))})),v(m(n),"_handlerSubmit",(function(e){e.preventDefault(),n._handlerSubmitForm(n._getInputValues())})),n._formElement=n._popup.querySelector(".popup__container"),n._handlerSubmitForm=e,n._popupInputs=Array.from(n._popup.querySelectorAll(".popup__input")),n}return t=a,(n=[{key:"setEventListeners",value:function(){d(b(a.prototype),"setEventListeners",this).call(this),this._formElement.addEventListener("submit",this._handlerSubmit)}},{key:"close",value:function(){d(b(a.prototype),"close",this).call(this),this._formElement.reset()}}])&&h(t.prototype,n),a}(o);function E(e){return(E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function S(e,t,n){return(S="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=O(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function C(e,t){return!t||"object"!==E(t)&&"function"!=typeof t?L(e):t}function L(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function O(e){return(O=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var I=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=O(r);if(o){var n=O(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return C(this,e)});function a(e,t){var n,r,o,c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),c=function(e){e.preventDefault(),n._handlerSubmitForm(n.card)},(o="_handlerSubmit")in(r=L(n=i.call(this,t)))?Object.defineProperty(r,o,{value:c,enumerable:!0,configurable:!0,writable:!0}):r[o]=c,n._handlerSubmitForm=e,n._formElement=n._popup.querySelector(".popup__container"),n}return t=a,(n=[{key:"setEventListeners",value:function(){S(O(a.prototype),"setEventListeners",this).call(this),this._formElement.addEventListener("submit",this._handlerSubmit)}},{key:"close",value:function(){S(O(a.prototype),"close",this).call(this)}},{key:"open",value:function(e){S(O(a.prototype),"open",this).call(this),this.card=e}}])&&k(t.prototype,n),a}(o);function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function j(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const T=function(){function e(t,n,r,o){var i=this,a=r.handleDeleteClick,c=r.handleLikeClick,u=r.handleImgClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),j(this,"_cloneTemplateElement",(function(){i._cardNewElement=i._templateElement.querySelector(".element").cloneNode(!0)})),j(this,"_takeElementsCard",(function(){i._imgElement=i._cardNewElement.querySelector(".element__img"),i._overlayImgElement=i._cardNewElement.querySelector(".element__overlay-img"),i._titleElement=i._cardNewElement.querySelector(".element__title"),i._likeQuantity=i._cardNewElement.querySelector(".element__like-quantity"),i._buttonLike=i._cardNewElement.querySelector(".element__icon-like"),i._buttonDelete=i._cardNewElement.querySelector(".element__icon-delete")})),j(this,"_compareOwner",(function(){i._ownerId!==i._myProfileId?(i._buttonDelete.remove(),i._flag=!1):i._flag=!0})),j(this,"_fillDataCard",(function(){i._imgElement.src=i._link,i._imgElement.alt=i._title,i._titleElement.textContent=i._title,i.updateQuantityLike()})),j(this,"_setEventListeners",(function(){i._buttonLike.addEventListener("click",(function(){i._handleLikeClick(i)})),i._flag&&i._buttonDelete.addEventListener("click",(function(){i._handleDeleteClick(i)})),i._overlayImgElement.addEventListener("click",(function(){i._handleImgClick({link:i._link,title:i._title})}))})),j(this,"createCard",(function(){return i._cloneTemplateElement(),i._takeElementsCard(),i._compareOwner(),i._fillDataCard(),i.toggleLikeIcon(),i._setEventListeners(),i._cardNewElement})),this._templateElement=document.querySelector(n).content,this._title=t.name,this._link=t.link,this._handleImgClick=u,this._handleLikeClick=c,this._handleDeleteClick=a,this.likes=t.likes,this._ownerId=t.owner._id,this.cardId=t._id,this._data=t,this._myProfileId=o}var t,n;return t=e,(n=[{key:"updateQuantityLike",value:function(){this._likeQuantity.textContent=this.likes.length}},{key:"toggleLikeIcon",value:function(){this.isLiked()?this._buttonLike.classList.add("element__icon-like_active"):this._buttonLike.classList.remove("element__icon-like_active")}},{key:"isLiked",value:function(){var e=this;return this.likes.some((function(t){return t._id===e._myProfileId}))}},{key:"removeCard",value:function(){this._cardNewElement.remove()}}])&&P(t.prototype,n),e}();function R(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const A=function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),R(this,"_showErrorMessage",(function(e){var t=r._formElement.querySelector(".".concat(e.id,"-error")),n=e.validationMessage;t.textContent=n,e.classList.add(r._configForm.inputErrorClass),t.classList.add(r._configForm.errorClass)})),R(this,"_hideErrorMessage",(function(e){var t=r._formElement.querySelector(".".concat(e.id,"-error"));t.textContent="",e.classList.remove(r._configForm.inputErrorClass),t.classList.remove(r._configForm.errorClass)})),R(this,"_checkInputValidity",(function(e){e.validity.valid?r._hideErrorMessage(e):r._showErrorMessage(e)})),R(this,"_activateButtonSubmit",(function(){r._buttonElement.classList.add(r._configForm.inactiveButtonClass),r._buttonElement.setAttribute("disabled","disabled")})),R(this,"_inactivateButtonSubmit",(function(){r._buttonElement.classList.remove(r._configForm.inactiveButtonClass),r._buttonElement.removeAttribute("disabled")})),R(this,"changeButtonText",(function(e){r._buttonElement.textContent=e})),R(this,"_checkInputsValid",(function(){return r._inputElements.some((function(e){return!e.validity.valid}))})),R(this,"toggleButtonState",(function(){r._checkInputsValid()?r._activateButtonSubmit():r._inactivateButtonSubmit()})),R(this,"_setInputListeners",(function(){r.toggleButtonState(),r._inputElements.forEach((function(e){e.addEventListener("input",(function(){r._checkInputValidity(e),r.toggleButtonState()}))}))})),R(this,"enableValidation",(function(){r._setInputListeners()})),R(this,"clearErrorsMessage",(function(){r._popupInputList.forEach(r._hideErrorMessage)})),this._formElement=n,this._buttonElement=n.querySelector(t.submitButtonSelector),this._inputElements=Array.from(n.querySelectorAll(t.inputSelector)),this._configForm=t,this._popupInputList=Array.from(this._formElement.querySelectorAll(t.inputSelector))};function q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var B=function(){function e(t){var n=t.profileTitleSelector,r=t.profileSubtitleSelector,o=t.profileAvatarSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._prifileTitle=document.querySelector(n),this._prifileSubtitle=document.querySelector(r),this._profileAvatar=document.querySelector(o),this._profileId=""}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._prifileTitle.textContent,about:this._prifileSubtitle.textContent}}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.about,r=e._id;this._prifileTitle.textContent=t,this._prifileSubtitle.textContent=n,this._profileId=r}},{key:"updateAvatar",value:function(e){this._profileAvatar.src=e}},{key:"getUserId",value:function(){return this._profileId}}])&&q(t.prototype,n),e}();function x(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var U=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=t.baseUrl,this._headers=t.headers}var t,n;return t=e,(n=[{key:"_handleResponse",value:function(e){return e.ok?e.json():Promise.reject("Произошла ошибка: ".concat(e.status))}},{key:"getCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{method:"GET",headers:this._headers}).then(this._handleResponse)}},{key:"addCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then(this._handleResponse)}},{key:"getProfile",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{method:"GET",headers:this._headers}).then(this._handleResponse)}},{key:"addProfile",value:function(e){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._handleResponse)}},{key:"deleteCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._handleResponse)}},{key:"deleteLike",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then(this._handleResponse)}},{key:"addLike",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then(this._handleResponse)}},{key:"updateAvatar",value:function(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._handleResponse)}}])&&x(t.prototype,n),e}(),D={inputSelector:".popup__input",inputErrorClass:"popup__input_type_error",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_disabled",errorClass:"popup__error_visible"},F=document.querySelector(".profile"),N=document.querySelector(".profile__overlay-avatar"),V=F.querySelector(".profile__edit-button"),M=F.querySelector(".profile__add-button"),Q=".element-template";function J(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var G=new A(D,document.forms.formAuthor),H=new A(D,document.forms.formCard),z=new A(D,document.forms.formAvatar),$=new U({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-26",headers:{authorization:"ef9c4dff-4cef-417b-a4dd-85f6d4ba3fef","Content-Type":"application/json"}}),K=new f(".popup_type_image");K.setEventListeners();var W=new I((function(e){$.deleteCard(e.cardId).then((function(t){"Пост удалён"===t.message&&(e.removeCard(),W.close())})).catch((function(e){return console.log(e)}))}),".popup_type_confirm");W.setEventListeners();var X={handleDeleteClick:function(){W.open(this)},handleLikeClick:function(){var e=this;(this.isLiked()?$.deleteLike(this.cardId):$.addLike(this.cardId)).then((function(t){e.likes=t.likes,e.updateQuantityLike(),e.toggleLikeIcon()})).catch((function(e){return console(e)}))},handleImgClick:function(e){K.open(e)}};function Y(e,t,n){var r=Z.getUserId();return new T(e,t,n,r).createCard()}var Z=new B({profileTitleSelector:".profile__title",profileSubtitleSelector:".profile__subtitle",profileAvatarSelector:".profile__avatar"});Promise.all([$.getProfile(),$.getCards()]).then((function(e){var n,r,o=(r=2,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){c=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(c)throw o}}return i}}(n,r)||function(e,t){if(e){if("string"==typeof e)return J(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?J(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=o[1];Z.setUserInfo(i),Z.updateAvatar(i.avatar);var c=new t((function(e){var t=Y(e,Q,X);c.addItem(t)}),".elements__list");c.rendererItems(a);var u=new g((function(e){H.changeButtonText("Создание..."),$.addCard(e).then((function(e){var t=Y(e,Q,X);c.addItemToTop(t),u.close(),H.toggleButtonState(),H.changeButtonText("Создать")})).catch((function(e){return console.log(e)}))}),".popup_type_add");u.setEventListeners();var l=new g((function(e){G.changeButtonText("Сохранение..."),$.addProfile(e).then((function(e){Z.setUserInfo(e),l.close(),G.changeButtonText("Сохранить")})).catch((function(e){return console.log(e)}))}),".popup_type_edit");l.setEventListeners();var s=new g((function(e){z.changeButtonText("Сохранение..."),$.updateAvatar(e).then((function(e){var t=e.avatar;Z.updateAvatar(t),s.close(),z.changeButtonText("Сохранить")})).catch((function(e){return console.log(e)}))}),".popup_type_avatar");s.setEventListeners(),V.addEventListener("click",(function(){l.setInputValues(Z.getUserInfo()),G.clearErrorsMessage(),l.open()})),M.addEventListener("click",(function(){H.clearErrorsMessage(),u.open()})),N.addEventListener("click",(function(){z.clearErrorsMessage(),z.toggleButtonState(),s.open()}))})).catch((function(e){return console.log(e)})).finally((function(){H.enableValidation(),G.enableValidation(),z.enableValidation()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,